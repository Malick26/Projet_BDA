class _AddDeathCertificatePageState extends State<AddDeathCertificatePage> {
  TextEditingController prenom = TextEditingController();
  TextEditingController nom = TextEditingController();
  TextEditingController lieu = TextEditingController();
  TextEditingController lieud = TextEditingController();
  TextEditingController dated = TextEditingController();
  TextEditingController daten = TextEditingController();
  TextEditingController cause = TextEditingController();
  bool ajoutEffectue = false;
  DateTime selectedDate = DateTime.now(); // Ajoutez cette ligne
  late UserProvider userProvider;
  late int userId;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Accédez à l'InheritedWidget ici
    userProvider = Provider.of<UserProvider>(context);
    userId = userProvider.userId;
  }

 Future<void> sendDataToApi() async {
    final String apiUrl = 'http://127.0.0.1:8000/api/deces';

    // Retrieve values from text fields
    String nomdefunt = nom.text;
    String prenomdefunt = prenom.text;
    String lieun = lieu.text;
    String lieudeces = lieud.text;
    String datedeces = dated.text;
    String datenaissance = daten.text;
    String causedeces = cause.text;
    // ... repeat for other fields

    // Prepare data for the API request
    Map<String, dynamic> data = {
      'idEmploye': userId,
      'nom': nomdefunt,
      'prenom': prenomdefunt,
      'lieu_naissance': lieun,
      'lieu_deces': lieudeces,
      'date_deces': datedeces,
      'date_naissance': datenaissance,
      'cause': causedeces,
      // ... include other fields in the data map
    };

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        body: json.encode(data),
        headers: {'Content-Type': 'application/json'},
      );
      final Logger _logger = Logger();

      if (response.statusCode == 200) {
        setState(() {
          _logger.e('ajout reussi');
          ajoutEffectue = true;
        });
      } else {
        _logger.e('erreur ici');
        // Handle error response
        print('API request failed with status ${response.statusCode}');
      }
    } catch (e) {
      // Handle network or other errors
      print('Error: $e');
    }
  }

  Future<void> _selectDate(
      BuildContext context, TextEditingController controller) async {
    // ... Votre code pour _selectDate
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromRGBO(205, 92, 92, 1),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(height: 20),
              Text(
                "Ajout certificat de décès",
                style: TextStyle(
                  fontSize: 35.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 70),
              buildTextField("Nom du défunt", nom),
              buildTextField("Prénom du défunt", prenom),
              buildDateTextField("Date de naissance du défunt", daten),
              buildTextField("Lieu de naissance du défunt", lieu),
              buildDateTextField("Date de décès", daten),
              buildTextField("Lieu de décès", lieud),
              buildTextField("Cause du décès", cause),
              SizedBox(height: 30),
              ajoutEffectue
                  ? Column(
                      children: [
                        Icon(
                          Icons.done,
                          size: 60,
                          color: Colors.green,
                        ),
                        Text(
                          'Ajout effectué',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                          ),
                        ),
                      ],
                    )
                  : Container(
                      height: 50,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor:
                                Color.fromRGBO(255, 160, 122, 1)),
                        onPressed: () {
                          sendDataToApi();
                        },
                        child: const Text(
                          'Ajouter',
                          style: TextStyle(color: Colors.white, fontSize: 20),
                        ),
                      ),
                    ),
              SizedBox(height: 30),
              IconButton(
                icon: Icon(
                  Icons.home,
                  color: Colors.white,
                  size: 30,
                ),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => Home()),
                  );
                },
              ),
              SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildTextField(String labelText, TextEditingController controller) {
    return Container(
      padding: const EdgeInsets.fromLTRB(20, 20, 20, 0),
      child: TextField(
        controller: controller,
        decoration: InputDecoration(
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(15.0),
            borderSide: BorderSide.none,
          ),
          labelText: labelText,
        ),
      ),
    );
  }

  Widget buildDateTextField(
      String labelText, TextEditingController controller) {
    return InkWell(
      onTap: () => _selectDate(context, controller),
      child: Container(
        padding: const EdgeInsets.fromLTRB(20, 20, 20, 0),
        child: TextField(
          controller: controller,
          decoration: InputDecoration(
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(15.0),
              borderSide: BorderSide.none,
            ),
            labelText: labelText,
            suffixIcon: Icon(Icons.calendar_today),
          ),
          enabled: false,
        ),
      ),
    );
  }
}
